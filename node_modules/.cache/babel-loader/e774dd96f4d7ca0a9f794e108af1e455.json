{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/sampai/Desktop/Tutoring/studentWork/AndyMunro/reactEmployeeDirectory.io/src/pages/Home.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport Container from \"../components/Container\";\nimport DataDisplay from \"../components/DataDisplay\";\nimport API from \"../utils/API\";\nimport SearchForm from \"../components/SearchForm\"; // import SearchResults from \"../components/SearchResults\"\n// import EmployeeContext from \"../utils/EmployeeContext\"\n\nfunction Home() {\n  _s();\n\n  const [EmployeeData, setEmployeeData] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [DisplayData, setDisplayData] = useState([]); // const [sortByName, setSortByName] = useState([])\n\n  useEffect(() => {\n    //    if nothing in search parameter then populate all users\n    if (!search) {\n      return API.getUsers().then(res => {\n        console.log(res);\n\n        if (res.data.length === 0) {\n          throw new Error(\"please enter a parameter\");\n        }\n\n        if (res.data.status === \"error\") {\n          throw new Error(res.data.message);\n        }\n\n        setEmployeeData(res.data.results);\n        setDisplayData(res.data.results); // setSortByfirstName(res.data.results.name.first)\n      }).catch(error => setError(error));\n    } else {\n      // if there is input in the search bar trigger employee search\n      EmployeeSearch(search);\n    } // searches as you enter letters or numbers into search parameter.\n\n  }, [search]);\n\n  const handleInputChange = event => {\n    event.preventDefault();\n    setSearch(event.target.value); // displays the searched for data \n\n    setDisplayData(EmployeeSearch(search));\n  };\n\n  function EmployeeSearch(search) {\n    // sets employee data to search data after it is filtered\n    let searchData = [];\n    searchData = EmployeeData.filter(employee => employee.name.first.toLowerCase().includes(search));\n    return searchData;\n  } // const handleInputChange = event => {\n  //     setSortByfirstName(event.target.value);\n  // }\n  // function sortByFirstName(props)\n  //  let firstNames =[];\n  //  firstNames = employee.name.first;\n  //  sortedNames.sort((a, b) => {\n  //      if(a.name < b.name) {\n  //          return -1;\n  //      }\n  //      if (a.name > b.name) {\n  //          return 1;\n  //      }\n  //      return 0;\n  //  });\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Home\", /*#__PURE__*/_jsxDEV(Container, {\n      style: {\n        minHeight: \"100vh\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-center\",\n        children: \"Search Employee Info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n        handleInputChange: handleInputChange,\n        results: search\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), error, /*#__PURE__*/_jsxDEV(DataDisplay, {\n        results: DisplayData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"vYGNqNWNACF6hruQHiXVq+2GZvQ=\");\n\n_c = Home;\n;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/sampai/Desktop/Tutoring/studentWork/AndyMunro/reactEmployeeDirectory.io/src/pages/Home.js"],"names":["useEffect","useState","Container","DataDisplay","API","SearchForm","Home","EmployeeData","setEmployeeData","search","setSearch","error","setError","DisplayData","setDisplayData","getUsers","then","res","console","log","data","length","Error","status","message","results","catch","EmployeeSearch","handleInputChange","event","preventDefault","target","value","searchData","filter","employee","name","first","toLowerCase","includes","minHeight"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport Container from \"../components/Container\";\nimport DataDisplay from \"../components/DataDisplay\"\nimport API from \"../utils/API\"\nimport SearchForm from \"../components/SearchForm\";\n// import SearchResults from \"../components/SearchResults\"\n// import EmployeeContext from \"../utils/EmployeeContext\"\n\nfunction Home () {\n    const [EmployeeData, setEmployeeData] = useState([]);\n    const [search, setSearch] = useState(\"\");\n    const [error, setError] = useState(\"\");\n    const [DisplayData, setDisplayData] = useState([]);\n    // const [sortByName, setSortByName] = useState([])\n\n   useEffect(() => {\n    //    if nothing in search parameter then populate all users\n       if (!search) {\n           return API.getUsers()\n           .then(res => {\n\n               console.log(res);\n\n               if (res.data.length === 0) {\n                   throw new Error(\"please enter a parameter\");\n                }\n                if (res.data.status === \"error\"){\n                    throw new Error(res.data.message);\n                }\n                setEmployeeData(res.data.results);\n                setDisplayData(res.data.results)\n                // setSortByfirstName(res.data.results.name.first)\n            })\n            .catch (error => setError(error));\n        }else{\n            // if there is input in the search bar trigger employee search\n            EmployeeSearch(search)\n        }\n        // searches as you enter letters or numbers into search parameter.\n        }, [search]);\n\nconst handleInputChange = event => {\n    event.preventDefault()\n    setSearch(event.target.value);\n    // displays the searched for data \n    setDisplayData(EmployeeSearch(search));\n    \n};\n\nfunction EmployeeSearch(search){\n// sets employee data to search data after it is filtered\nlet searchData = []\n\nsearchData = EmployeeData.filter(employee =>\n    employee.name.first.toLowerCase().includes(search))  \n    \n    return searchData;\n\n}\n// const handleInputChange = event => {\n//     setSortByfirstName(event.target.value);\n// }\n// function sortByFirstName(props)\n\n//  let firstNames =[];\n\n//  firstNames = employee.name.first;\n \n//  sortedNames.sort((a, b) => {\n//      if(a.name < b.name) {\n//          return -1;\n//      }\n//      if (a.name > b.name) {\n//          return 1;\n//      }\n//      return 0;\n//  });\n   \n\nreturn (\n    <div>\n        Home\n        <Container style={{ minHeight: \"100vh\" }}>\n                <h1 className=\"text-center\">Search Employee Info</h1>\n                <SearchForm\n                    handleInputChange = {handleInputChange}\n                    results={search}\n                    />\n                    {error}\n                <DataDisplay \n                results={DisplayData} \n                />\n        </Container>\n    </div>\n);\n\n};\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}